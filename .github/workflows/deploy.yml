name: Deploy via Azure RunCommand
on: { push: { branches: [ main ] } }

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy on VM (as user)
        uses: azure/cli@v2
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az vm run-command invoke \
              --resource-group "${{ secrets.AZ_RG }}" \
              --name "${{ secrets.AZ_VM }}" \
              --command-id RunShellScript \
              --scripts "$(cat << 'DEPLOY_SCRIPT'
            #!/bin/bash
            set -e
            
            echo "=== Deployment started at $(date) ==="
            
            # System dependencies
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs build-essential git python3
            fi
            
            sudo npm install -g pm2@latest corepack
            
            if ! id aum-sitrai >/dev/null 2>&1; then
              sudo useradd -m -s /bin/bash aum-sitrai
            fi
            
            # Deploy as user
            sudo -H -u aum-sitrai bash << 'USER_SCRIPT'
            set -e
            export HOME=/home/aum-sitrai
            export PATH="/usr/local/bin:/usr/bin:/bin:$HOME/.local/bin:$PATH"
            cd $HOME
            
            echo "User: $(whoami), Node: $(node -v)"
            
            # Repository setup
            APP_DIR="$HOME/aum-ai"
            REPO_URL="https://token:${{ secrets.GH_PAT }}@github.com/sumanrajsah/aum-ai.git"
            
            if [ -d "$APP_DIR" ]; then
              cd "$APP_DIR"
              git remote set-url origin "$REPO_URL"
              git fetch --all
              git reset --hard origin/main
              git clean -fd
            else
              git clone "$REPO_URL" "$APP_DIR"
              cd "$APP_DIR"
            fi
            
            # Environment file
            cat > .env.local << ENV_FILE
            NEXT_PUBLIC_API_URI=${{ secrets.NEXT_PUBLIC_API_URI }}
            NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}
            NODE_ENV=production
            ENV_FILE
            
            # Yarn setup
            corepack enable
            corepack prepare yarn@stable --activate
            echo "Yarn version: $(yarn -v)"
            
            # Clean install with dependency resolution
            echo "=== Installing dependencies ==="
            yarn cache clean || true
            rm -rf node_modules || true
            rm -rf .yarn/cache || true
            
            # Install missing peer dependencies first
            yarn add --dev postcss prop-types webpack
            yarn add @ai-sdk/openai ethers langchain @cloudflare/workers-types
            
            # Try immutable install, fallback to regular install
            if ! yarn install --immutable --network-timeout 300000; then
              echo "Immutable install failed, allowing updates..."
              yarn install --network-timeout 300000
            fi
            
            # Build with increased memory
            echo "=== Building application ==="
            export NODE_OPTIONS="--max-old-space-size=4096"
            yarn build
            
            # PM2 management
            export PM2_HOME="$HOME/.pm2"
            if pm2 describe aum-ai >/dev/null 2>&1; then
              pm2 reload aum-ai
            else
              pm2 start npm --name aum-ai -- start
            fi
            pm2 save
            
            echo "=== Deployment completed ==="
            pm2 status
            USER_SCRIPT
            DEPLOY_SCRIPT
            )"